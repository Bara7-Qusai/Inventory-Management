/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
import dao.ConnectionProvider;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author bara7
 */
public class DisplayMonthlyDateExtends extends javax.swing.JFrame {

    /**
     * Creates new form DisplayMonthlyDateExtends
     */
    public DisplayMonthlyDateExtends() {
        initComponents();
        setLocationRelativeTo(null);
    }

        
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableShow = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        btnClose = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Impact", 1, 36)); // NOI18N
        jLabel1.setText("View Monthly  Sales");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 30, -1, -1));

        tableShow.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Month/year", "Expenses", "sales", "net profit"
            }
        ));
        jScrollPane1.setViewportView(tableShow);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 90, -1, -1));
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(-10, 0, 740, -1));

        btnClose.setText("Colse");
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });
        getContentPane().add(btnClose, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 500, -1, -1));

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/All_page_Background.png"))); // NOI18N
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, -20, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        // TODO add your handling code here:
         calculateMonthlyExpenses();
         calculateMonthlySales();
         calculateMonthlyNetProfit();
         displayMonthlyData();
    }//GEN-LAST:event_formComponentShown

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        // TODO add your handling code here:
         setVisible(false);
    }//GEN-LAST:event_btnCloseActionPerformed
private void calculateMonthlyExpenses() {
        try {
            Connection conn = ConnectionProvider.getCon();
            PreparedStatement ps = conn.prepareStatement("SELECT DATE_FORMAT(expenesDate, '%Y-%m') AS YearMonth, SUM(exoenseprice) AS TotalExpenses FROM expenes GROUP BY YearMonth");
            ResultSet rs = ps.executeQuery();
                       

            while (rs.next()) {
                String yearMonth = rs.getString("YearMonth");
                int totalExpenses = rs.getInt("TotalExpenses");
                
                PreparedStatement insertPs = conn.prepareStatement("INSERT INTO MonthlyExpenses (YearMonth, TotalExpenses) VALUES (?, ?) ON DUPLICATE KEY UPDATE TotalExpenses = VALUES(TotalExpenses)");
                insertPs.setString(1, yearMonth);
                insertPs.setInt(2, totalExpenses);
                //insertPs.setInt(3, totalExpenses);
                insertPs.executeUpdate();
                insertPs.close();
              
            }
            rs.close();
            ps.close();
            conn.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error calculating monthly expenses: " + e.getMessage());
        }
    }
private void calculateMonthlySales() {
        try {
            Connection conn = ConnectionProvider.getCon();
            String sql = "SELECT DATE_FORMAT(orderDate, '%Y-%m') AS YearMonth, SUM(totalPaid) AS TotalSales FROM OrderDetail GROUP BY YearMonth";
            PreparedStatement ps = conn.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();

            while (rs.next()) {
                String yearMonth = rs.getString("YearMonth");
                int totalSales = rs.getInt("TotalSales");

                PreparedStatement insertPs = conn.prepareStatement(
                    "INSERT INTO MonthlySales (YearMonth, TotalSales) VALUES (?, ?) ON DUPLICATE KEY UPDATE TotalSales = VALUES(TotalSales)");
                insertPs.setString(1, yearMonth);
                insertPs.setInt(2, totalSales);
               // insertPs.setInt(3, totalSales);
                insertPs.executeUpdate();
                insertPs.close();
                 
            }
            rs.close();
            ps.close();
            conn.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error calculating monthly sales: " + e.getMessage());
        }
    }

 private void calculateMonthlyNetProfit() {
        try {
            Connection conn = ConnectionProvider.getCon();
            String sql = "SELECT me.YearMonth, COALESCE(ms.TotalSales, 0) - COALESCE(me.TotalExpenses, 0) AS NetProfit FROM MonthlyExpenses me LEFT JOIN MonthlySales ms ON me.YearMonth = ms.YearMonth";
            PreparedStatement ps = conn.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();

            while (rs.next()) {
                String yearMonth = rs.getString("YearMonth");
                int netProfit = rs.getInt("NetProfit");

                PreparedStatement insertPs = conn.prepareStatement(
                    "INSERT INTO MonthlyNetProfit (YearMonth, NetProfit) VALUES (?, ?) " +
                    "ON DUPLICATE KEY UPDATE NetProfit = VALUES(NetProfit)");
                insertPs.setString(1, yearMonth);
                insertPs.setInt(2, netProfit);
                //insertPs.setInt(3, netProfit);
                insertPs.executeUpdate();
                insertPs.close();
                //JOptionPane.showMessageDialog(null, "success");
            }
            rs.close();
            ps.close();
            conn.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error calculating monthly net profit: " + e.getMessage());
        }
    }

private void displayMonthlyData() {
        DefaultTableModel model = (DefaultTableModel) tableShow.getModel();
        model.setRowCount(0); // Clear existing rows

        try {
            
            Connection conn = ConnectionProvider.getCon();
            String sql = "SELECT me.YearMonth, COALESCE(me.TotalExpenses, 0) AS TotalExpenses, COALESCE(ms.TotalSales, 0) AS TotalSales, COALESCE(mnp.NetProfit, 0) AS NetProfit " +
                         "FROM MonthlyExpenses me " +
                         "LEFT JOIN MonthlySales ms ON me.YearMonth = ms.YearMonth " +
                         "LEFT JOIN MonthlyNetProfit mnp ON me.YearMonth = mnp.YearMonth";
            PreparedStatement ps = conn.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();

            while (rs.next()) {
                String yearMonth = rs.getString("YearMonth");
                int totalExpenses = rs.getInt("TotalExpenses");
                int totalSales = rs.getInt("TotalSales");
                int netProfit = rs.getInt("NetProfit");
                model.addRow(new Object[]{yearMonth, totalExpenses, totalSales, netProfit});
            }
            rs.close();
            ps.close();
            conn.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error displaying monthly data: " + e.getMessage());
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DisplayMonthlyDateExtends.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DisplayMonthlyDateExtends.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DisplayMonthlyDateExtends.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DisplayMonthlyDateExtends.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DisplayMonthlyDateExtends().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClose;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tableShow;
    // End of variables declaration//GEN-END:variables
}
